---
description: 
globs: 
alwaysApply: true
---
# MCP 服务器开发核心指导原则

## 项目概览
本项目基于 Model Context Protocol (MCP) 构建，遵循官方 Python SDK v1.10.1 规范。MCP 是 AI 应用的"USB-C 端口"，为 LLM 与外部数据源和工具提供标准化连接协议。

## 核心架构原则

### 1. 传输层选择
- **本地开发/调试**: 使用 `stdio` 传输
- **生产环境/Web 部署**: 使用 `Streamable HTTP` 传输（默认）
- **遗留系统兼容**: 使用 `SSE` 传输（已弃用，新项目禁止使用）

### 2. 项目结构规范
参考 [BEST_PRACTICES.md](mdc:BEST_PRACTICES.md) 中的生产级目录模板：

```
server/                  # 核心 Python 包
├── __init__.py
├── main.py              # FastMCP 实例 & 应用入口
├── config.py            # Pydantic Settings / env 解析
├── resources/           # 所有 @mcp.resource
├── tools/               # 所有 @mcp.tool
├── prompts/             # 所有 @mcp.prompt
└── routes/              # 旁路 REST API
```

### 3. MCP 三大核心原语
- **Tools**: 模型可执行的函数（如 API 调用、数据更新）
- **Resources**: 结构化数据流（如文件、API 响应）
- **Prompts**: 可重用的指令模板

## 开发最佳实践

### 1. FastMCP 服务器实现
```python
from mcp.server.fastmcp import FastMCP

mcp = FastMCP(
    name="ServerName",
    stateless_http=True,  # 生产环境推荐，便于水平扩容
)

# 工具定义
@mcp.tool(title="工具标题", description="工具描述")
def tool_name(param: type) -> return_type:
    """工具文档字符串"""
    return result

# 资源定义
@mcp.resource("scheme://{param}", title="资源标题")
def resource_name(param: type) -> str:
    """资源文档字符串"""
    return data

# 提示定义
@mcp.prompt(title="提示标题")
def prompt_name(param: type) -> str:
    """提示文档字符串"""
    return prompt_template
```

### 2. Streamable HTTP 最佳实践
- 使用 `mcp.streamable_http_app()` 获取 FastAPI 实例
- 默认端点: `http://127.0.0.1:8000/mcp`
- 支持自定义路由和静态文件挂载
- 生产环境配置 CORS 和安全头

### 3. 类型安全和错误处理
- 使用 Python 类型提示定义参数和返回值
- 实现适当的错误处理和验证
- 使用 Pydantic 模型进行复杂数据结构

### 4. 配置管理
参考 [BEST_PRACTICES.md](mdc:BEST_PRACTICES.md) 的配置模式：
- 使用 `config.py` 统一管理环境变量
- 避免硬编码配置值
- 支持开发/测试/生产环境配置

## 部署和运维

### 1. 部署结构
所有部署相关配置统一放在 `deploy/` 目录：
```
deploy/
├── docker/              # 容器化配置
├── kubernetes/          # K8s 部署配置
└── ci/                  # CI/CD 配置
```

### 2. 健康检查
实现标准健康检查端点：
- `/health` - 基础健康状态
- 支持 K8s liveness 和 readiness 探针

### 3. 监控和日志
- 使用结构化 JSON 日志
- 实现 Prometheus 指标收集
- 配置分布式追踪

### 4. 安全考虑
- 实现适当的认证机制
- 使用 HTTPS 传输
- 实施输入验证和速率限制
- 遵循最小权限原则

## 测试策略

### 1. 单元测试
- 测试所有 tools、resources 和 prompts
- 使用 pytest 和 httpx 进行异步测试
- 模拟外部依赖

### 2. 集成测试
- 测试完整的 MCP 协议交互
- 使用 Streamable HTTP 端到端测试
- 验证错误处理和边界情况

### 3. 性能测试
- 负载测试关键工具和资源
- 监控内存使用和响应时间
- 测试并发连接处理

## 常见模式和反模式

### ✅ 推荐模式
- 使用装饰器定义 MCP 组件
- 实现幂等操作
- 提供清晰的错误消息
- 使用异步操作处理 I/O
- 实现适当的缓存策略

### ❌ 避免反模式
- 在 MCP 组件中硬编码配置
- 忽略错误处理
- 阻塞操作导致性能问题
- 不安全的输入处理
- 缺乏适当的日志记录

## 版本兼容性

### 当前版本要求
- Python 3.10+
- mcp==1.10.1
- fastapi~=0.115.14
- uvicorn (用于 Streamable HTTP)

### 升级策略
- 在 staging 环境测试新版本
- 遵循语义化版本控制
- 维护向后兼容性
- 文档化破坏性变更

## 开发工具链

### 推荐工具
- **MCP Inspector**: 交互式调试工具
- **FastMCP CLI**: 快速运行和测试

### 调试技巧
- 使用 `fastmcp dev` 命令启动调试模式
- 启用详细日志记录
- 使用 MCP Inspector 测试协议交互
- 监控网络流量和性能指标

## 社区和支持

### 官方资源
- [MCP 官方文档](mdc:https:/modelcontextprotocol.io)
- [Python SDK GitHub](mdc:https:/github.com/modelcontextprotocol/python-sdk)
- [FastMCP 文档](mdc:https:/gofastmcp.com)

## 最佳实践参考

1. **KISS 原则**：保持简单和直接
2. **DRY 原则**：不要重复代码
3. **SOLID 原则**：面向对象设计原则
4. **测试驱动**：先写测试，再写实现
5. **文档先行**：代码即文档

## 持续改进

### 性能优化
- 实施连接池
- 使用适当的缓存策略
- 优化数据库查询
- 监控和调优资源使用

### 可维护性
- 保持代码模块化
- 编写清晰的文档
- 实施代码审查
- 定期重构和更新依赖
